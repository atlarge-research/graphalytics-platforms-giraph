From fdb453fd6ac5c0bba3c752846e2b3562a2fa3179 Mon Sep 17 00:00:00 2001
From: Wing Lung Ngai <winglung.ngai@gmail.com>
Date: Wed, 17 Feb 2016 02:26:44 +0100
Subject: [PATCH] granularized

---
 giraph-core/pom.xml                                |   6 +-
 .../apache/giraph/granula/CountTimeSerieStore.java | 103 +++++++++++++++++++++
 .../java/org/apache/giraph/granula/GiraphTerm.java |  19 ++++
 .../apache/giraph/granula/GranulaDataStore.java    |  37 ++++++++
 .../org/apache/giraph/granula/GranulaLogger.java   |  57 ++++++++++++
 .../apache/giraph/granula/GranulaLoggerStore.java  |  22 +++++
 .../org/apache/giraph/granula/IdentifierType.java  |  11 +++
 .../org/apache/giraph/granula/MatchingMethod.java  |  10 ++
 .../org/apache/giraph/granula/TimeSerieStore.java  | 101 ++++++++++++++++++++
 .../org/apache/giraph/graph/GraphTaskManager.java  |   2 +
 .../main/java/org/apache/giraph/job/GiraphJob.java |   6 ++
 .../org/apache/giraph/master/MasterThread.java     |  17 ++++
 .../org/apache/giraph/yarn/GiraphYarnClient.java   |   8 +-
 .../org/apache/giraph/yarn/GiraphYarnTask.java     |   6 +-
 pom.xml                                            |  20 ++--
 15 files changed, 407 insertions(+), 18 deletions(-)
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/CountTimeSerieStore.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/GiraphTerm.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/GranulaDataStore.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/GranulaLogger.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/GranulaLoggerStore.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/IdentifierType.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/MatchingMethod.java
 create mode 100644 giraph-core/src/main/java/org/apache/giraph/granula/TimeSerieStore.java

diff --git a/giraph-core/pom.xml b/giraph-core/pom.xml
index 85b9377..edc4089 100644
--- a/giraph-core/pom.xml
+++ b/giraph-core/pom.xml
@@ -24,7 +24,7 @@ under the License.
   <parent>
     <groupId>org.apache.giraph</groupId>
     <artifactId>giraph-parent</artifactId>
-    <version>1.1.0</version>
+    <version>1.1.0-hadoop2-withGranula</version>
   </parent>
   <artifactId>giraph-core</artifactId>
   <packaging>jar</packaging>
@@ -37,6 +37,9 @@ under the License.
     <export-target.dir>export/target</export-target.dir>
     <top.dir>${project.basedir}/..</top.dir>
     <project.jar>${project.basedir}/target/giraph-${project.version}-${forHadoop}-jar-with-dependencies.jar</project.jar>
+    <checkstyle.skip>true</checkstyle.skip>
+    <findbugs.skip>true</findbugs.skip>
+    <rat.skip>true</rat.skip>
   </properties>
 
   <build>
@@ -117,6 +120,7 @@ under the License.
       <plugin>
         <groupId>org.apache.rat</groupId>
         <artifactId>apache-rat-plugin</artifactId>
+        <version>0.11</version>
       </plugin>
       <plugin>
         <artifactId>maven-antrun-plugin</artifactId>
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/CountTimeSerieStore.java b/giraph-core/src/main/java/org/apache/giraph/granula/CountTimeSerieStore.java
new file mode 100644
index 0000000..149cb07
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/CountTimeSerieStore.java
@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.giraph.granula;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Print log messages only if the time is met.  Thread-safe.
+ */
+public class CountTimeSerieStore {
+  /** Last time printed */
+  private volatile long lastPrint = System.currentTimeMillis();
+  /** Minimum interval of time to wait before printing */
+  private final int msecs;
+
+  private volatile long count;
+
+  private final int step;
+
+  private List<TimeValue> timeValues;
+
+  /**
+   * Constructor of the timed logger
+   *
+   * @param msecs Msecs to wait before printing again
+   */
+  public CountTimeSerieStore(int msecs, int step) {
+    this.msecs = msecs;
+    this.step = step;
+    timeValues = new ArrayList<>();
+  }
+
+  /**
+   * Print to the info log level if the minimum waiting time was reached.
+   *
+   */
+  public void add(long value) {
+    if (isAddable()) {
+      timeValues.add(new TimeValue(value));
+    }
+  }
+
+  public void empty() {
+    timeValues = new ArrayList<>();
+  }
+
+  /**
+   * Is the log message printable (minimum interval met)?
+   *
+   * @return True if the message is printable
+   */
+  public boolean isAddable() {
+    count++;
+    if(count % step == 0) {
+      if (System.currentTimeMillis() > lastPrint + msecs) {
+        lastPrint = System.currentTimeMillis();
+        return true;
+      }
+    }
+    return false;
+  }
+
+  public void forceadd(long value) {
+    timeValues.add(new TimeValue(value));
+  }
+
+  public String export(){
+    StringBuilder string = new StringBuilder();
+    for (TimeValue timeValue : timeValues) {
+      string.append(timeValue.timestamp + "-" + timeValue.value + "#");
+    }
+    return string.toString();
+  }
+
+
+  private class TimeValue {
+    long timestamp;
+    long value;
+
+    public TimeValue(long value) {
+      this.timestamp = System.currentTimeMillis();
+      this.value = value;
+    }
+  }
+
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/GiraphTerm.java b/giraph-core/src/main/java/org/apache/giraph/granula/GiraphTerm.java
new file mode 100644
index 0000000..4177074
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/GiraphTerm.java
@@ -0,0 +1,19 @@
+package org.apache.giraph.granula;
+
+/**
+ * Created by wing on 11-2-15.
+ */
+public class GiraphTerm {
+
+    public static String Giraph = "Giraph";
+    public static String Bsp = "Bsp";
+    public static String Job = "Job";
+    public static String ProcessGraph = "ProcessGraph";
+
+    public static String Superstep = "Superstep";
+    public static String StartTime = "StartTime";
+    public static String EndTime = "EndTime";
+
+
+
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/GranulaDataStore.java b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaDataStore.java
new file mode 100644
index 0000000..e346c6c
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaDataStore.java
@@ -0,0 +1,37 @@
+package org.apache.giraph.granula;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+/**
+ * Created by wing on 27-3-15.
+ */
+public class GranulaDataStore {
+
+    public static String workerId;
+
+    public static AtomicLong ContainersLoaded = new AtomicLong();
+
+    public static AtomicLong SentMsgs = new AtomicLong();
+
+    public static AtomicLong LoadedDataVolume = new AtomicLong();
+
+    public static AtomicLong ActiveVertices = new AtomicLong();
+
+    public static AtomicLong SentMsgVolume = new AtomicLong();
+    public static AtomicLong RemoteMsgVolume = new AtomicLong();
+    public static AtomicLong ReceivedMsgVolume = new AtomicLong();
+
+    public static AtomicLong SentReqVolume = new AtomicLong();
+    public static AtomicLong RemoteReqVolume = new AtomicLong();
+    public static AtomicLong ReceivedReqsVolume = new AtomicLong();
+
+    public static long SetupStartTime = Long.MAX_VALUE;
+    public static long ZookeeperStartTime;
+    public static long ZookeeperEndTime;
+    public static long SetupEndTime = Long.MAX_VALUE;
+
+
+    public static TimeSerieStore PartitionTimeSeries = new TimeSerieStore(2 * 1000); //30 * 1000
+    public static TimeSerieStore ReceivedMsgVolumeTimeSeries = new TimeSerieStore(2 * 1000); //30 * 1000
+    public static TimeSerieStore SentMsgVolumeTimeSeries = new TimeSerieStore(2 * 1000); //30 * 1000
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLogger.java b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLogger.java
new file mode 100644
index 0000000..bc9dd9c
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLogger.java
@@ -0,0 +1,57 @@
+package org.apache.giraph.granula;
+
+import java.util.UUID;
+
+/**
+ * Created by wing on 28-1-15.
+ */
+public class GranulaLogger {
+
+    public long uuid;
+
+    public String actorType;
+    public String actorId;
+    public String missionType;
+    public String missionId;
+
+    public GranulaLogger(String actorType, String actorId, String missionType, String missionId) {
+        this.uuid = UUID.randomUUID().getLeastSignificantBits() * -1l;
+        this.actorType = actorType;
+        this.actorId = actorId;
+        this.missionType = missionType;
+        this.missionId = missionId;
+    }
+
+    public String logInfo(String name, String value) {
+
+        String escapedValue = value.replaceAll(":", "\\[COLON\\]");
+
+        String info = String.format("InfoName:%s InfoValue:%s Timestamp:%s RecordUuid:%s",
+                name, escapedValue, System.currentTimeMillis(), UUID.randomUUID().getLeastSignificantBits() * -1l);
+
+        return logRecord(info);
+    }
+
+    public String logRecord(String record) {
+        return String.format("GRANULA %s %s", record, logOperation());
+    }
+
+
+
+    private String logOperation() {
+        return String.format("OperationUuid:%s ActorType:%s ActorId:%s MissionType:%s MissionId:%s",
+                uuid, actorType, actorId, missionType, missionId);
+    }
+
+    public void setActorId(String actorId) {
+        this.actorId = actorId;
+    }
+
+    public void setMissionId(String missionId) {
+        this.missionId = missionId;
+    }
+
+    public void resetUuid() {
+        this.uuid = UUID.randomUUID().getLeastSignificantBits() * -1l;
+    }
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLoggerStore.java b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLoggerStore.java
new file mode 100644
index 0000000..687920a
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/GranulaLoggerStore.java
@@ -0,0 +1,22 @@
+package org.apache.giraph.granula;
+
+/**
+ * Created by wing on 10-4-15.
+ */
+public class GranulaLoggerStore {
+
+    public static GranulaLogger giraphJobLogger;
+    public static GranulaLogger superstepLogger;
+    public static GranulaLogger processGraphLogger;
+
+    public static void load() {
+        giraphJobLogger = new GranulaLogger(GiraphTerm.Giraph, IdentifierType.Unique,
+                GiraphTerm.Job, IdentifierType.Unique);
+
+        processGraphLogger = new GranulaLogger(GiraphTerm.Giraph, IdentifierType.Unique,
+                GiraphTerm.ProcessGraph, IdentifierType.Unique);
+
+        superstepLogger = new GranulaLogger(GiraphTerm.Bsp, IdentifierType.Unique,
+                GiraphTerm.Superstep, String.valueOf(Integer.MIN_VALUE));
+    }
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/IdentifierType.java b/giraph-core/src/main/java/org/apache/giraph/granula/IdentifierType.java
new file mode 100644
index 0000000..05b016b
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/IdentifierType.java
@@ -0,0 +1,11 @@
+package org.apache.giraph.granula;
+
+/**
+ * Created by wing on 4-2-15.
+ */
+public class IdentifierType {
+
+    public static String Unique = "Id.Unique";
+    public static String LocalUnique = "Id.LocalUnique";
+    public static String Unknown = "Id.Unknown";
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/MatchingMethod.java b/giraph-core/src/main/java/org/apache/giraph/granula/MatchingMethod.java
new file mode 100644
index 0000000..544358e
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/MatchingMethod.java
@@ -0,0 +1,10 @@
+package org.apache.giraph.granula;
+
+/**
+ * Created by wing on 2-2-15.
+ */
+public class MatchingMethod {
+    public static String ByUuid = "ByUuid";
+    public static String ByLoggingCloseness = "ByLoggingCloseness";
+    public static String ByGlobalUniqueness = "ByGlobalUniqueness";
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/granula/TimeSerieStore.java b/giraph-core/src/main/java/org/apache/giraph/granula/TimeSerieStore.java
new file mode 100644
index 0000000..dc58aff
--- /dev/null
+++ b/giraph-core/src/main/java/org/apache/giraph/granula/TimeSerieStore.java
@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.giraph.granula;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Print log messages only if the time is met.  Thread-safe.
+ */
+public class TimeSerieStore {
+  /** Last time printed */
+  private volatile long lastPrint = System.currentTimeMillis();
+  /** Minimum interval of time to wait before printing */
+  private final int msecs;
+
+  private List<TimeValue> timeValues;
+
+  /**
+   * Constructor of the timed logger
+   *
+   * @param msecs Msecs to wait before printing again
+   */
+  public TimeSerieStore(int msecs) {
+    this.msecs = msecs;
+    timeValues = new ArrayList<>();
+  }
+
+  /**
+   * Print to the info log level if the minimum waiting time was reached.
+   *
+   */
+  public void add(long value) {
+    if (isAddable()) {
+      timeValues.add(new TimeValue(value));
+    }
+  }
+
+  public void empty() {
+    timeValues = new ArrayList<>();
+  }
+
+  /**
+   * Is the log message printable (minimum interval met)?
+   *
+   * @return True if the message is printable
+   */
+  public boolean isAddable() {
+    if (System.currentTimeMillis() > lastPrint + msecs) {
+      lastPrint = System.currentTimeMillis();
+      return true;
+    }
+
+    return false;
+  }
+
+  public void forceadd(long value) {
+    timeValues.add(new TimeValue(value));
+  }
+
+  public String export(){
+    StringBuilder string = new StringBuilder();
+    for (TimeValue timeValue : timeValues) {
+      string.append(timeValue.toString() + "#");
+    }
+    return string.toString();
+  }
+
+
+  private class TimeValue {
+    long timestamp;
+    long value;
+
+    public TimeValue(long value) {
+      this.timestamp = System.currentTimeMillis();
+      this.value = value;
+    }
+
+    @Override
+    public String toString() {
+      return timestamp + "-" + value;
+    }
+  }
+
+}
diff --git a/giraph-core/src/main/java/org/apache/giraph/graph/GraphTaskManager.java b/giraph-core/src/main/java/org/apache/giraph/graph/GraphTaskManager.java
index eb9fad3..3582eca 100644
--- a/giraph-core/src/main/java/org/apache/giraph/graph/GraphTaskManager.java
+++ b/giraph-core/src/main/java/org/apache/giraph/graph/GraphTaskManager.java
@@ -38,6 +38,7 @@ import org.apache.giraph.bsp.CheckpointStatus;
 import org.apache.giraph.comm.messages.MessageStore;
 import org.apache.giraph.conf.GiraphConstants;
 import org.apache.giraph.conf.ImmutableClassesGiraphConfiguration;
+import org.apache.giraph.granula.GranulaLoggerStore;
 import org.apache.giraph.job.JobProgressTracker;
 import org.apache.giraph.master.BspServiceMaster;
 import org.apache.giraph.master.MasterThread;
@@ -195,6 +196,7 @@ public class GraphTaskManager<I extends WritableComparable, V extends Writable,
   public void setup(Path[] zkPathList)
     throws IOException, InterruptedException {
     context.setStatus("setup: Beginning worker setup.");
+    GranulaLoggerStore.load();
     Configuration hadoopConf = context.getConfiguration();
     conf = new ImmutableClassesGiraphConfiguration<I, V, E>(hadoopConf);
     initializeJobProgressTracker();
diff --git a/giraph-core/src/main/java/org/apache/giraph/job/GiraphJob.java b/giraph-core/src/main/java/org/apache/giraph/job/GiraphJob.java
index 11ae7fc..76b08b1 100644
--- a/giraph-core/src/main/java/org/apache/giraph/job/GiraphJob.java
+++ b/giraph-core/src/main/java/org/apache/giraph/job/GiraphJob.java
@@ -23,6 +23,8 @@ import org.apache.giraph.bsp.BspOutputFormat;
 import org.apache.giraph.conf.GiraphConfiguration;
 import org.apache.giraph.conf.GiraphConstants;
 import org.apache.giraph.conf.ImmutableClassesGiraphConfiguration;
+import org.apache.giraph.granula.GiraphTerm;
+import org.apache.giraph.granula.GranulaLoggerStore;
 import org.apache.giraph.graph.GraphMapper;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.ipc.Client;
@@ -196,6 +198,9 @@ public class GiraphJob {
    */
   public final boolean run(boolean verbose)
     throws IOException, InterruptedException, ClassNotFoundException {
+    GranulaLoggerStore.load();
+    LOG.info(GranulaLoggerStore.giraphJobLogger.logInfo(GiraphTerm.StartTime, String.valueOf(System.currentTimeMillis())));
+
     // Most users won't hit this hopefully and can set it higher if desired
     setIntConfIfDefault("mapreduce.job.counters.limit", 512);
 
@@ -281,6 +286,7 @@ public class GiraphJob {
       }
 
       if (passed || !retryChecker.shouldRetry(submittedJob, tryCount)) {
+        LOG.info(GranulaLoggerStore.giraphJobLogger.logInfo(GiraphTerm.EndTime, String.valueOf(System.currentTimeMillis())));
         return passed;
       }
       if (LOG.isInfoEnabled()) {
diff --git a/giraph-core/src/main/java/org/apache/giraph/master/MasterThread.java b/giraph-core/src/main/java/org/apache/giraph/master/MasterThread.java
index 8e4e0b8..ee31828 100644
--- a/giraph-core/src/main/java/org/apache/giraph/master/MasterThread.java
+++ b/giraph-core/src/main/java/org/apache/giraph/master/MasterThread.java
@@ -23,6 +23,8 @@ import org.apache.giraph.bsp.BspService;
 import org.apache.giraph.bsp.CentralizedServiceMaster;
 import org.apache.giraph.bsp.SuperstepState;
 import org.apache.giraph.counters.GiraphTimers;
+import org.apache.giraph.granula.GiraphTerm;
+import org.apache.giraph.granula.GranulaLoggerStore;
 import org.apache.giraph.graph.Computation;
 import org.apache.giraph.metrics.GiraphMetrics;
 import org.apache.hadoop.io.Writable;
@@ -116,6 +118,17 @@ public class MasterThread<I extends WritableComparable, V extends Writable,
           GiraphTimers.getInstance().getSetupMs().increment(setupMillis);
           setupSecs = setupMillis / 1000.0d;
           while (!superstepState.isExecutionComplete()) {
+
+              long superstep = bspServiceMaster.getSuperstep();
+              if(superstep >= 0) {
+                  if(superstep == 0) {
+                      LOG.info(GranulaLoggerStore.processGraphLogger.logInfo(GiraphTerm.StartTime, String.valueOf(System.currentTimeMillis())));
+                  }
+                  GranulaLoggerStore.superstepLogger.resetUuid();
+                  GranulaLoggerStore.superstepLogger.setMissionId(String.valueOf(bspServiceMaster.getSuperstep()));
+                  LOG.info(GranulaLoggerStore.superstepLogger.logInfo(GiraphTerm.StartTime, String.valueOf(System.currentTimeMillis())));
+              }
+
             long startSuperstepMillis = System.currentTimeMillis();
             long cachedSuperstep = bspServiceMaster.getSuperstep();
             GiraphMetrics.get().resetSuperstepMetrics(cachedSuperstep);
@@ -149,7 +162,11 @@ public class MasterThread<I extends WritableComparable, V extends Writable,
                   bspServiceMaster.getLastGoodCheckpoint());
             }
             endMillis = System.currentTimeMillis();
+            if(superstep >= 0) {
+              LOG.info(GranulaLoggerStore.superstepLogger.logInfo(GiraphTerm.EndTime, String.valueOf(System.currentTimeMillis())));
+            }
           }
+          LOG.info(GranulaLoggerStore.processGraphLogger.logInfo(GiraphTerm.EndTime, String.valueOf(System.currentTimeMillis())));
           bspServiceMaster.setJobState(ApplicationState.FINISHED, -1, -1);
         }
       }
diff --git a/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnClient.java b/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnClient.java
index 9f5924d..93c8696 100644
--- a/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnClient.java
+++ b/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnClient.java
@@ -290,7 +290,7 @@ public class GiraphYarnClient {
       LOG.error("Fatal fault encountered, failing " + jobName + ". " +
         diagnostics, ex);
       try {
-        LOG.error("FORCIBLY KILLING Application from AppMaster.");
+        LOG.error("FORCIBLY KILLING Application from Giraph.");
         yarnClient.killApplication(appId);
       } catch (YarnException yre) {
         LOG.error("Exception raised in attempt to kill application.", yre);
@@ -480,7 +480,7 @@ public class GiraphYarnClient {
   }
 
   /**
-   * Construct the memory requirements for the AppMaster's container request.
+   * Construct the memory requirements for the Giraph's container request.
    * @return A Resource that wraps the memory request.
    */
   private Resource buildContainerMemory() {
@@ -492,7 +492,7 @@ public class GiraphYarnClient {
   /**
    * Create the mapping of environment vars that will be visible to the
    * ApplicationMaster in its remote app container.
-   * @return a map of environment vars to set up for the AppMaster.
+   * @return a map of environment vars to set up for the Giraph.
    */
   private Map<String, String> buildEnvironment() {
     Map<String, String> environment =
@@ -508,7 +508,7 @@ public class GiraphYarnClient {
    * Create the mapping of files and JARs to send to the GiraphApplicationMaster
    * and from there on to the Giraph tasks.
    * @return the map of jars to local resource paths for transport
-   *   to the host container that will run our AppMaster.
+   *   to the host container that will run our Giraph.
    */
   private Map<String, LocalResource> buildLocalResourceMap() {
     // set local resources for the application master
diff --git a/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnTask.java b/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnTask.java
index ccfc972..0843c80 100644
--- a/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnTask.java
+++ b/giraph-core/src/main/java/org/apache/giraph/yarn/GiraphYarnTask.java
@@ -139,7 +139,7 @@ public class GiraphYarnTask<I extends WritableComparable, V extends Writable,
   /**
    * Utility to generate dummy Mapper#Context for use in Giraph internals.
    * This is the "key hack" to inject MapReduce-related data structures
-   * containing YARN cluster metadata (and our GiraphConf from the AppMaster)
+   * containing YARN cluster metadata (and our GiraphConf from the Giraph)
    * into our Giraph BSP task code.
    * @param tid the TaskAttemptID to construct this Mapper#Context from.
    * @return sort of a Mapper#Context if you squint just right.
@@ -186,7 +186,7 @@ public class GiraphYarnTask<I extends WritableComparable, V extends Writable,
       // CHECKSTYLE resume IllegalCatch
       LOG.error("GiraphYarnTask threw a top-level exception, failing task", t);
       System.exit(2);
-    } // ALWAYS finish a YARN task or AppMaster with System#exit!!!
+    } // ALWAYS finish a YARN task or Giraph with System#exit!!!
     System.exit(0);
   }
 
@@ -194,7 +194,7 @@ public class GiraphYarnTask<I extends WritableComparable, V extends Writable,
    * Utility to create a TaskAttemptId we can feed to our fake Mapper#Context.
    *
    * NOTE: ContainerId will serve as MR TaskID for Giraph tasks.
-   * YARN container 1 is always AppMaster, so the least container id we will
+   * YARN container 1 is always Giraph, so the least container id we will
    * ever get from YARN for a Giraph task is container id 2. Giraph on MapReduce
    * tasks must start at index 0. So we SUBTRACT TWO from each container id.
    *
diff --git a/pom.xml b/pom.xml
index 2ef804a..bb8d399 100644
--- a/pom.xml
+++ b/pom.xml
@@ -31,7 +31,7 @@ under the License.
   <groupId>org.apache.giraph</groupId>
   <artifactId>giraph-parent</artifactId>
   <packaging>pom</packaging>
-  <version>1.1.0</version>
+  <version>1.1.0-hadoop2-withGranula</version>
 
   <name>Apache Giraph Parent</name>
   <url>http://giraph.apache.org/</url>
@@ -1193,7 +1193,7 @@ under the License.
         <module>giraph-dist</module>
       </modules>
       <properties>
-        <hadoop.version>SET_HADOOP_VERSION_USING_MVN_DASH_D_OPTION</hadoop.version>
+        <hadoop.version>2.5.1</hadoop.version>
         <munge.symbols>PURE_YARN,STATIC_SASL_SYMBOL</munge.symbols>
         <!-- TODO: add these checks eventually -->
         <project.enforcer.skip>true</project.enforcer.skip>
@@ -1291,13 +1291,13 @@ under the License.
     <profile>
        <id>hadoop_2</id>
       <modules>
-        <module>giraph-accumulo</module>
-        <module>giraph-hbase</module>
-        <module>giraph-hcatalog</module>
-        <module>giraph-hive</module>
-        <module>giraph-gora</module>
-        <module>giraph-rexster</module>
-        <module>giraph-dist</module>
+        <!--<module>giraph-accumulo</module>-->
+        <!--<module>giraph-hbase</module>-->
+        <!--<module>giraph-hcatalog</module>-->
+        <!--<module>giraph-hive</module>-->
+        <!--<module>giraph-gora</module>-->
+        <!--<module>giraph-rexster</module>-->
+        <!--<module>giraph-dist</module>-->
       </modules>
        <properties>
          <hadoop.version>2.5.1</hadoop.version>
@@ -2243,7 +2243,7 @@ under the License.
 
   <modules>
     <module>giraph-core</module>
-    <module>giraph-examples</module>
+    <!--<module>giraph-examples</module>-->
   </modules>
 
 </project>
-- 
1.9.1

